using System;
using System.Runtime.InteropServices;

namespace NetRadio.Devices.G313
{
    /// <summary>
    /// Represents WinRadio G313 DSP firmware image.
    /// <remarks>WinRadio G313 DSP is based on Off the shelve Analog Devices DSP families which can be programmed using Visual DSP++.</remarks>
    /// </summary>
    public class G313BootImage:IImage
    {
        private static readonly ushort[] DspBoot = {
		    0x0006,0x8000,0x4000,0x0000,0x0000,0x0000,0x0000,0x0000,
		    0x0001,0x0010,0x8000,0x4020,0x810F,0x8279,0x8301,0x8400,
		    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
		    0x2000,0x1000,0x0000,0x0000,0x0006,0x8000,0x0001,0x4040,
		    0x0000,0x93FF,0x00F0,0x1833,0x002F,0x0002,0x8000,0x0010,
		    0x0A00,0x001F,0x0008,0x8000,0x0014,0x0C00,0x0030,0x8002,
		    0x0080,0x9002,0x0010,0x1835,0x00CF,0x00CE,0x8000,0x0332,
		    0x3C0F,0x00FC,0x3C00,0x0004,0x3C00,0x0000,0x3C00,0x0001,
		    0x0202,0x008F,0x400F,0x000A,0x93FE,0x006A,0x93FE,0x005A,
		    0x3402,0x0043,0x3400,0x004B,0x3400,0x0017,0x3802,0x0003,
		    0x3800,0x004B,0x3800,0x0017,0x40FB,0x00F0,0x93FF,0x0030,
		    0x4280,0x00F0,0x93FF,0x0060,0x0203,0x000F,0x0200,0x00CF,
		    0x3C04,0x0003,0x4140,0x0000,0x93FF,0x00F0,0x7000,0x000F,
		    0x0D0C,0x0090,0x0280,0x0000,0x4852,0x0000,0x9002,0x0000,
		    0x4860,0x0000,0x9002,0x0010,0x4870,0x0000,0x9002,0x0020,
		    0x4800,0x0010,0x9002,0x0030,0x0280,0x0000,0x3C02,0x0003,
		    0x8000,0x004A,0x227A,0x000F,0x1835,0x00B0,0x0D08,0x002A,
		    0x0B00,0x009F,0x1835,0x006F,0x8002,0x0090,0x9002,0x0020,
		    0x8002,0x00A0,0x9002,0x0030,0x8002,0x00B0,0x9002,0x0000,
		    0x8000,0x005A,0x2782,0x001F,0x1836,0x00F0,0x23C2,0x001F,
		    0x9000,0x005A,0x4000,0x000A,0x9002,0x00EA,0x4200,0x000A,
		    0x9002,0x00CA,0x4100,0x000A,0x9002,0x00DA,0x4000,0x000A,
		    0x9002,0x00FA,0x8402,0x00D1,0x3500,0x0009,0x6000,0x0007,
		    0x9002,0x0080,0x6000,0x0007,0x9002,0x0090,0x6000,0x0007,
		    0x9002,0x00A0,0x6000,0x0007,0x9002,0x00B0,0x9402,0x00D1,
		    0x8402,0x00C1,0x3500,0x0009,0x8002,0x004A,0x6800,0x00A7,
		    0x8002,0x005A,0x6800,0x00A7,0x8002,0x006A,0x6800,0x00A7,
		    0x8002,0x007A,0x6800,0x00A7,0x9402,0x00C1,0x8002,0x00EA,
		    0x4000,0x0044,0x2262,0x000F,0x9002,0x00EA,0x22F2,0x009F,
		    0x1839,0x0084,0x8000,0x0000,0x2A78,0x00AA,0x1839,0x0081,
		    0x9002,0x00EA,0x4000,0x000A,0x93FE,0x005A,0x8002,0x00F4,
		    0x2220,0x000F,0x9000,0x000A,0x2382,0x00BF,0x9002,0x00FA,
		    0x400F,0x000A,0x93FE,0x005A,0x0A00,0x001F,0x0002,0x8000,
		    0x0000,0x3C00,0x0003,0xFFFF
	    };

        private GCHandle _handle;
        private ushort[] _data;

        /// <summary>
        /// Locks firmware data in memory.
        /// </summary>
        /// <returns>Returns <see cref="IntPtr"/> which points to firmware data</returns>
        public IntPtr LockBits()
        {
            _handle = GCHandle.Alloc(_data, GCHandleType.Pinned);
            return _handle.AddrOfPinnedObject();
        }

        /// <summary>
        /// Unlocks firmware data in memory.
        /// </summary>
        public void UnlockBits()
        {
            if (_handle == default(GCHandle))
                return;
            _handle.Free();
            _handle = default(GCHandle);
        }

        /// <summary>
        /// Disposes of the resources (other than memory) used by the <see cref="G313BootImage"/>.
        /// </summary>
        public void Dispose()
        {
            UnlockBits();
        }

        /// <summary>
        /// Creates default firmware image for WinRadio G313 DSP
        /// </summary>
        public G313BootImage()
        {
            _data = DspBoot;
        }

        /// <summary>
        /// Creates firmware image for WinRadio G313 DSP
        /// </summary>
        /// <param name="data">Firmware Raw data</param>
        public G313BootImage(ushort[] data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets size of firmware (number of WORDs).
        /// </summary>
        public uint Size
        {
            get { return (uint)_data.Length; }
        }
    }
}
