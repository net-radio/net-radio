<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">
    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>
    <LinearGradientBrush x:Key="BaseBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF878787" Offset="0"/>
        <GradientStop Color="#FF737373" Offset="0.402"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkBrush" Color="#FF000000"/>
    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFFFFFFF" Offset="0"/>
        <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
        <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="MouseOverBrush" Color="#FFFF8000"/>
    <SolidColorBrush x:Key="TranslucentBrush" Color="#3FFFFFFF"/>
    <LinearGradientBrush x:Key="InsetBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
        <GradientStop Color="#FFD8D8D8" Offset="1"/>
        <GradientStop Color="#FF646464" Offset="0.522"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="InsetBrush2" Color="#FF373737"/>
    <LinearGradientBrush x:Key="HoverOpacity" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF000000" Offset="0"/>
        <GradientStop Color="#52FFFFFF" Offset="1"/>
        <GradientStop Color="#EAD9D9D9" Offset="0.388"/>
        <GradientStop Color="#FBF9F9F9" Offset="0.603"/>
        <GradientStop Color="#FFE7E7E7" Offset="0.446"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FF626262"/>
    <SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource WhiteColor}"/>
    <SolidColorBrush x:Key="TextBrush" Color="{DynamicResource WhiteColor}"/>
    <Style x:Key="NuclearButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearButton}"/>
    </Style>
    <ControlTemplate x:Key="NuclearButton" TargetType="{x:Type Button}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid>
            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                 Margin="-2.4,-2.4,-2.4,-2.4" Opacity="0.1">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                 Margin="-1.8,-1.8,-1.8,-1.8" Opacity="0.15">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                 Opacity="0.2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
              Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                <Grid Width="Auto" Height="Auto">
                    <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                  CornerRadius="2,2,2,2"/>
                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                  BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                </Grid>
            </Border>
            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                 Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"/>
            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
              Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true"/>
            <Trigger Property="Button.IsDefaulted" Value="true"/>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearCheckBox}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <ControlTemplate x:Key="NuclearCheckBox" TargetType="{x:Type CheckBox}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOn">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#7F000000"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#00898989"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#7F898989"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#FF898989"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#00BDBDBD"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#7FBDBDBD"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#7FBDBDBD"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#FFBDBDBD"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[4].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00CCCCCC"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="#7FCCCCCC"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#7FCCCCCC"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.5000000" Value="#FFCCCCCC"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="#00FFFFFF"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#7FFFFFFF"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.5000000" Value="#7FFFFFFF"/>
                    <SplineColorKeyFrame KeyTime="00:00:01.6000000" Value="#FFFFFFFF"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOff">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#00FFFFFF"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[4].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#00CCCCCC"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00CCCCCC"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00BDBDBD"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00BDBDBD"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00898989"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00898989"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="#00000000"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ThreeStateOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ThreeStateOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="22" Height="21">
                    <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="3" RadiusY="3" Margin="2,2,2,2"
                     Opacity="0.1">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="2.5" RadiusY="2.5"
                     Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="1" RadiusY="1"
                     Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Border x:Name="ButtonBase" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" Margin="4,4,4,4"
                  Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                        <Grid Width="Auto" Height="Auto">
                            <Border x:Name="DarkBorder" Margin="0,3,0,0" Background="{DynamicResource DarkBrush}"
                      CornerRadius="0.5,0.5,0.5,0.5"/>
                            <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                      BorderThickness="1,1,1,1" CornerRadius="0.1,0.1,0.1,0.1"/>
                        </Grid>
                    </Border>
                    <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                     Margin="4,4,4,4" Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="ThreeState" Fill="{DynamicResource NormalBorderBrush}" Margin="6,6,6,6" RadiusX="1"
                     RadiusY="1" Opacity="0">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Path x:Name="path" Stretch="Fill" HorizontalAlignment="Left" VerticalAlignment="Top"
                RenderTransformOrigin="0.579226216727124,0.50000014550231"
                Data="M 5.3780575,0 L 7.8294313,2.7441231 11.450873,8.0827497 11.919026,8.8493227 14.019023,7.5131057 17.719252,5.5400914 22.05115,3.9532694 18.691134,7.4083007 15.57022,10.319636 13.77147,11.882588 14.085888,12.397431 16.603626,16.586224 18.623122,21.023358 20.376132,26.100001 16.64069,22.135558 13.65919,18.438469 10.889118,14.004199 10.878786,13.986612 7.6024437,15.717841 4.8041753,17.040179 0.091806889,18.340409 0,18.141341 4.0161839,14.310517 6.8337634,12.38895 9.0167246,10.817123 7.9543905,9.0088819 5.962121,3.7959269 5.1691307,0.10977665 Z"
                Margin="-3.365,-1,4,-2" Height="Auto" Width="Auto">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                        <UIElement.OpacityMask>
                            <RadialGradientBrush GradientOrigin="0.56,0.416" Center="0.56,0.416" RadiusY="0.615" RadiusX="0.577">
                                <GradientStop Color="#00000000" Offset="0"/>
                                <GradientStop Color="#00FFFFFF" Offset="1"/>
                                <GradientStop Color="#00898989" Offset="0.472"/>
                                <GradientStop Color="#00BDBDBD" Offset="0.689"/>
                                <GradientStop Color="#00CCCCCC" Offset="0.85"/>
                            </RadialGradientBrush>
                        </UIElement.OpacityMask>
                        <Shape.Fill>
                            <LinearGradientBrush EndPoint="0.94,0.514" StartPoint="0.191,0.352">
                                <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                <GradientStop Color="#FF4B4B4B" Offset="0.525"/>
                                <GradientStop Color="#FEDCDCDC" Offset="0.38"/>
                                <GradientStop Color="#FFB5B5B5" Offset="0.669"/>
                            </LinearGradientBrush>
                        </Shape.Fill>
                        <UIElement.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="76.358"/>
                                <TranslateTransform X="0" Y="8.8817841970012523E-16"/>
                            </TransformGroup>
                        </UIElement.RenderTransform>
                    </Path>
                    <Rectangle x:Name="HoverEffect_Copy" Stroke="{DynamicResource DisabledBorderBrush}" RadiusX="1" RadiusY="1"
                     Margin="4,4,4,4" Fill="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="true" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="3,3,0,0"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True"/>
                    <Condition Property="ToggleButton.IsThreeState" Value="true"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked">
                        <Condition.Value>
                            <x:NullExtension/>
                        </Condition.Value>
                    </Condition>
                    <Condition Property="ToggleButton.IsThreeState" Value="true"/>
                </MultiTrigger.Conditions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource ThreeStateOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource ThreeStateOff}"/>
                </TriggerBase.ExitActions>
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CheckedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="HoverEffect_Copy" Property="UIElement.Opacity" Value="0.4"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearRadioButton}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <ControlTemplate x:Key="NuclearRadioButton" TargetType="{x:Type RadioButton}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOn">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#7F000000"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#00717171"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#7F717171"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#FF717171"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00ABABAB"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#7FABABAB"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#FFABABAB"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#00FFFFFF"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#7FFFFFFF"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FFFFFFFF"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOff">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00FFFFFF"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00ABABAB"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00ABABAB"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00717171"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00717171"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                      Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                    <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#00000000"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="20" Height="20">
                    <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="10" RadiusY="10" Margin="2,2,2,2"
                     Opacity="0.1">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="9" RadiusY="9"
                     Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="8" RadiusY="8"
                     Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="10,10,10,10" Margin="4,4,4,4"
                  Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                        <Grid Width="Auto" Height="Auto">
                            <Border x:Name="DarkBorder" Margin="0,3,0,0" Background="{DynamicResource DarkBrush}"
                      CornerRadius="10,10,10,10"/>
                            <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                      BorderThickness="1,1,1,1" CornerRadius="4,4,4,4"/>
                            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                         Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <Border x:Name="CheckMark" BorderThickness="1,1,1,1" Margin="6,6,6,6"
                  Background="{DynamicResource NormalBorderBrush}" CornerRadius="10,10,10,10">
                        <Border.BorderBrush>
                            <x:NullExtension/>
                        </Border.BorderBrush>
                        <UIElement.OpacityMask>
                            <RadialGradientBrush GradientOrigin="0.612,0.388" Center="0.612,0.388">
                                <GradientStop Color="#00000000" Offset="0"/>
                                <GradientStop Color="#00FFFFFF" Offset="1"/>
                                <GradientStop Color="#00717171" Offset="0.645"/>
                                <GradientStop Color="#00ABABAB" Offset="0.842"/>
                            </RadialGradientBrush>
                        </UIElement.OpacityMask>
                    </Border>
                    <Border x:Name="border" BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="1,1,1,1"
                  CornerRadius="10,10,10,10" Margin="4,4,4,4" Background="{DynamicResource DisabledBackgroundBrush}"
                  Opacity="0"/>
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="true" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="3,3,0,0"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CheckedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="NuclearRepeatButton" TargetType="{x:Type RepeatButton}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true"/>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true"/>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearThumbStyle" TargetType="{x:Type Thumb}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="Grid" Margin="0,-3,0,-3">
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                       Margin="0,0.5,0.5,0.5" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5" Margin="0,1,1,1"
                       Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="0,2,2,2"
                       Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="BaseBorder" Background="#FF000000" Margin="0,3,3,3" CornerRadius="0,3,3,0">
                            <Border.BorderBrush>
                                <x:NullExtension/>
                            </Border.BorderBrush>
                        </Border>
                        <Border Margin="0,2,2,2" Background="{DynamicResource DarkBrush}" BorderBrush="#FF000000"
                    BorderThickness="1,1,1,1" CornerRadius="0,4,4,0"/>
                        <Border x:Name="ButtonBase" BorderThickness="0,2,2,2" CornerRadius="0,3,3,0"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Margin="0,2,2,2">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,7,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="0,2,2,0"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="0,1,1,1" CornerRadius="0,1,1,0"/>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverEffect" Background="{TemplateBinding Control.Background}" CornerRadius="0,6,6,0"
                    Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" Margin="0,2,2,2"/>
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Left" Margin="2,0,0,0">
                            <Path x:Name="arrow_Copy" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                    RenderTransformOrigin="0.5,0.5" Margin="0,0,0,4">
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                            </Path>
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                        </StackPanel>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="0,1,1,1" CornerRadius="0,3,3,0"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Margin="0,2,2,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true"/>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="NuclearHorizontalThumbStyle" TargetType="{x:Type Thumb}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="Grid" Margin="0,-3,0,-3">
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                       Margin="0.5,0.5,0.5,0.5" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="0.8,0.8,0.8,0.8" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                       Margin="1.3,1.3,1.3,1.3" Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="BaseBorder" Background="#FF000000" Margin="3,3,0,3" CornerRadius="0,3,3,0">
                            <Border.BorderBrush>
                                <x:NullExtension/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,0,2" CornerRadius="3,0,0,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Margin="2,2,0,2">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,7,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,0,0,1"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="0,1,1,1" CornerRadius="1,0,0,1"/>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverEffect" Background="{TemplateBinding Control.Background}" CornerRadius="4,0,0,4"
                    Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" Margin="2,2,0,2"/>
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,2,0">
                            <Path x:Name="arrow_Copy" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                    RenderTransformOrigin="0.5,0.5" Margin="0,0,0,4">
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                            </Path>
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                        </StackPanel>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,0,1" CornerRadius="3,0,0,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Margin="2,2,0,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true"/>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}"
                       StrokeThickness="{TemplateBinding Control.BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Panel.Background>
                            <x:NullExtension/>
                        </Panel.Background>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*"/>
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineUpCommand" Visibility="Collapsed">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,4 L 8,4 4,0 Z"/>
                            </Grid>
                        </RepeatButton>
                        <Track x:Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource NuclearThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineDownCommand" Visibility="Collapsed">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,0 L 4,4 8,0 Z"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Vertical"/>
                            <Setter TargetName="DecreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineLeftCommand"/>
                            <Setter TargetName="IncreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineRightCommand"/>
                            <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
                            <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
                            <Setter TargetName="thumb" Value="{DynamicResource NuclearHorizontalThumbStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                   Margin="0,0,0,-21">
                       <!--AutomationId="HorizontalScrollBar"--> 
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                       Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                   Margin="0,0,-21,0">
                       <!--AutomationId="VerticalScrollBar"--> 
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="2,2,2,2"
                       Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                       Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3" Margin="4,4,4,4">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF878787" Offset="0"/>
                                    <GradientStop Color="#FF737373" Offset="0.402"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                    <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                    <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                        CornerRadius="1,1,1,1"/>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                            <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                            <GradientStop Color="#FF646464" Offset="0.522"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Grid>
                                        <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                        <ScrollViewer Margin="1" Focusable="false" Background="{DynamicResource DarkBrush}">
                                            <StackPanel Margin="2" IsItemsHost="true"/>
                                        </ScrollViewer>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" Margin="4,4,4,4" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="true" Margin="0,1,0,1">
                        <Border x:Name="Base" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="HoverDarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverTranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="SelectedHoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="HoverDarkBorder1" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverTranslucentBorder1" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="SelectedHoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="4,4,0,4"/>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearTextBox}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <ControlTemplate x:Key="NuclearTextBox" TargetType="{x:Type TextBox}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.65"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid x:Name="TextGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                 Margin="-2.4,-2.4,-2.4,-2.4" Opacity="0.1">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                 Margin="-1.8,-1.8,-1.8,-1.8" Opacity="0.15">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                 Opacity="0.2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF878787" Offset="0"/>
                        <GradientStop Color="#FF737373" Offset="0.402"/>
                    </LinearGradientBrush>
                </Border.Background>
                <Border.BorderBrush>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFFFFFFF" Offset="0"/>
                        <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                        <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                    </LinearGradientBrush>
                </Border.BorderBrush>
                <Grid Width="Auto" Height="Auto">
                    <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                  CornerRadius="2,2,2,2"/>
                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                  CornerRadius="1,1,1,1"/>
                    <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                     Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                     Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}"
                  BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource InsetBrush}">
                        <Grid>
                            <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource InsetBrush2}"/>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{DynamicResource DarkBrush}"/>
                        </Grid>
                    </Border>
                </Grid>
            </Border>
            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
              Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TextBox.CharacterCasing" Value="Normal"/>
            <MultiTrigger>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                    <Condition Property="UIElement.IsFocused" Value="false"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.65"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="TextGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                       Margin="-2.4,-2.4,-2.4,-2.4" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="-1.8,-1.8,-1.8,-1.8" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                       Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF878787" Offset="0"/>
                                    <GradientStop Color="#FF737373" Offset="0.402"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                    <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                    <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                        CornerRadius="1,1,1,1"/>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource InsetBrush}">
                                    <Grid>
                                        <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource InsetBrush2}"/>
                                        <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{DynamicResource DarkBrush}"/>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="UIElement.IsFocused" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2,-2,-2,-2"
                 Opacity="0.1" Grid.ColumnSpan="2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                 Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.15" Grid.ColumnSpan="2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                 Opacity="0.2" Grid.ColumnSpan="2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3" Margin="0,0,0,0"
              Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
              Grid.ColumnSpan="2">
                <Grid Width="Auto" Height="Auto">
                    <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                  CornerRadius="4,4,4,4"/>
                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                  BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                </Grid>
            </Border>
            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                 Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" Grid.ColumnSpan="2">
                <Shape.Stroke>
                    <x:NullExtension/>
                </Shape.Stroke>
            </Rectangle>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                        Grid.ColumnSpan="2"/>
            <Path x:Name="arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
            Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
              Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard1" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard1" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Grid Margin="3,0,0,0">
            <Border x:Name="InsetBorder" Background="{DynamicResource DarkBrush}" BorderThickness="1,1,1,1"
              CornerRadius="2,2,2,2" BorderBrush="{DynamicResource InsetBrush}">
                <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource InsetBrush2}"/>
            </Border>
            <Border x:Name="PART_ContentHost" Focusable="false" Background="{TemplateBinding Control.Background}"
              VerticalAlignment="Center" Margin="5,0,0,0"/>
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearComboBox}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <ControlTemplate x:Key="NuclearComboBox" TargetType="{x:Type ComboBox}">
        <Grid>
            <ToggleButton x:Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}"
                    Focusable="false" ClickMode="Press" Background="{DynamicResource MouseOverBrush}">
                <ToggleButton.IsChecked>
                    <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </ToggleButton.IsChecked>
            </ToggleButton>
            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="7,3,23,3" VerticalAlignment="Center"
                        Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                        IsHitTestVisible="false"/>
            <TextBox x:Name="PART_EditableTextBox" Visibility="Visible" Template="{DynamicResource ComboBoxTextBox}"
               HorizontalAlignment="Left" Margin="5,0,23,0" VerticalAlignment="Stretch" Focusable="true"
               Background="Transparent" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Opacity="0"
               Foreground="{DynamicResource TextBrush}">
                <FrameworkElement.Style>
                    <x:NullExtension/>
                </FrameworkElement.Style>
            </TextBox>
            <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
             Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
                <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
              MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true"
              Margin="0,0,18,0">
                    <Border x:Name="DropDownBorder" Background="{DynamicResource DarkBrush}" BorderThickness="1"
                  BorderBrush="{DynamicResource NormalBorderBrush}"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Margin="4,6,4,6">
                        <Grid>
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}"
                           Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                           Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="4"/>
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.IsTabStop" Value="false"/>
                <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
                <Setter TargetName="PART_EditableTextBox" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                <Setter TargetName="PART_EditableTextBox" Property="FrameworkElement.Margin" Value="3,0,18,0"/>
                <Setter TargetName="PART_EditableTextBox" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="true" Margin="0,1,0,1">
                        <Border x:Name="Base" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="5,4,0,4"/>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="-1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="false" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="19"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2,-2,-2,-2"
                       Opacity="0.1" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.15" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                       Opacity="0.2" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Grid.ColumnSpan="2">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="4,4,4,4"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,4,0,4" VerticalAlignment="Center"
                              Grid.Column="1" RecognizesAccessKey="true"/>
                        <Path x:Name="arrow" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center"
                  Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                  RenderTransformOrigin="0.5,0.5">
                            <UIElement.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </UIElement.RenderTransform>
                        </Path>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="-1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="false" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="19"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid RowSpan="2">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="-90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2,-2,-2,-2"
                         Opacity="0.1">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                         Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.15">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                         Opacity="0.2">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                      Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                                <Grid Width="Auto" Height="Auto">
                                    <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                          CornerRadius="4,4,4,4"/>
                                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                          BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                </Grid>
                            </Border>
                            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                         Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Path x:Name="arrow" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                    RenderTransformOrigin="0.5,0.5" Margin="0,0,8,0">
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                            </Path>
                            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                      BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                      Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top"
                              Grid.Row="1" RecognizesAccessKey="true">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="-90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="-1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="false" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="19"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2,-2,-2,-2"
                       Opacity="0.1" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.15" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                       Opacity="0.2" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Grid.ColumnSpan="2" Margin="0,0,0,0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="4,4,4,4"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" Grid.ColumnSpan="2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,4,0,4" VerticalAlignment="Center"
                              Grid.Column="1" RecognizesAccessKey="true"/>
                        <Path x:Name="arrow" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center"
                  Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                  RenderTransformOrigin="0.5,0.5">
                            <UIElement.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </UIElement.RenderTransform>
                        </Path>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
                        <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center"
                              Grid.Column="1" RecognizesAccessKey="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="arrow"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="-1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="false" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="19"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid RowSpan="2">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="-90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2,-2,-2,-2"
                         Opacity="0.1">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                         Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.15">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                         Opacity="0.2">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                      Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                                <Grid Width="Auto" Height="Auto">
                                    <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                          CornerRadius="4,4,4,4"/>
                                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                          BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                </Grid>
                            </Border>
                            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                         Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Path x:Name="arrow" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Center"
                    Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                    RenderTransformOrigin="0.5,0.5" Margin="0,0,8,0">
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                            </Path>
                            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                      BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                      Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"
                      Margin="0,0,-4,0"/>
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top"
                              Grid.Row="1" RecognizesAccessKey="true">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" FontFamily="{TemplateBinding Control.FontFamily}"
                            FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                            FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                            Foreground="{TemplateBinding Control.Foreground}"
                            HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            Padding="{TemplateBinding Control.Padding}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" MinHeight="0" MinWidth="0"
                            Style="{StaticResource ExpanderDownHeaderStyle}"
                            Content="{TemplateBinding HeaderedContentControl.Header}"
                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                            DockPanel.Dock="Top" Panel.ZIndex="100">
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsExpanded" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <Border x:Name="border" Visibility="Collapsed" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3">
                                <Border.BorderBrush>
                                    <x:NullExtension/>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <x:NullExtension/>
                                </Border.Background>
                                <Grid>
                                    <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="2,2,2,2"
                             Opacity="0.1">
                                        <Shape.Stroke>
                                            <x:NullExtension/>
                                        </Shape.Stroke>
                                    </Rectangle>
                                    <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                             Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                                        <Shape.Stroke>
                                            <x:NullExtension/>
                                        </Shape.Stroke>
                                    </Rectangle>
                                    <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                             Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                                        <Shape.Stroke>
                                            <x:NullExtension/>
                                        </Shape.Stroke>
                                    </Rectangle>
                                    <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3">
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FF878787" Offset="0"/>
                                                <GradientStop Color="#FF737373" Offset="0.402"/>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <Border.BorderBrush>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                                <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>
                                        <Grid Width="Auto" Height="Auto">
                                            <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                              CornerRadius="2,2,2,2"/>
                                            <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                              CornerRadius="1,1,1,1"/>
                                            <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                                 Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                                <Shape.Stroke>
                                                    <x:NullExtension/>
                                                </Shape.Stroke>
                                            </Rectangle>
                                            <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                                 Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                                <Shape.Stroke>
                                                    <x:NullExtension/>
                                                </Shape.Stroke>
                                            </Rectangle>
                                            <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="#FF000000" BorderThickness="1,1,1,1"
                              CornerRadius="2,2,2,2">
                                                <Border.BorderBrush>
                                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                        <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                                        <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                                        <GradientStop Color="#FF646464" Offset="0.522"/>
                                                    </LinearGradientBrush>
                                                </Border.BorderBrush>
                                                <Grid>
                                                    <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                                    <ContentPresenter x:Name="ExpandSite" Focusable="false"
                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1,1,1,1"
                                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" DockPanel.Dock="Bottom"/>
                                                </Grid>
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                          BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                          Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                                </Grid>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="border" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Down">
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,-5,0,0"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="-5,0,0,0"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,-5"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,-5,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="IndeterminateOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.55"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.56"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.55"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                             Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[3].(GradientStop.Offset)"
                                             RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="1.56"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ValueChangedOn">
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.3000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:02" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="Background">
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                       Margin="-2.4,-2.4,-2.4,-2.4" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="-1.8,-1.8,-1.8,-1.8" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                       Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="PART_Track" CornerRadius="2">
                            <Grid>
                                <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                                    <FrameworkElement.LayoutTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </FrameworkElement.LayoutTransform>
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="4,4,4,4"/>
                                        <Border x:Name="PART_Indicator" HorizontalAlignment="Left" BorderThickness="1" CornerRadius="2">
                                            <Border.Background>
                                                <x:NullExtension/>
                                            </Border.Background>
                                            <Border.BorderBrush>
                                                <x:NullExtension/>
                                            </Border.BorderBrush>
                                            <Grid>
                                                <Rectangle x:Name="IndeterminateBorder" Fill="#FFFFFFFF" StrokeThickness="0">
                                                    <Shape.Stroke>
                                                        <x:NullExtension/>
                                                    </Shape.Stroke>
                                                    <UIElement.OpacityMask>
                                                        <LinearGradientBrush EndPoint="1,0.5" StartPoint="0.0,0.5">
                                                            <GradientStop Color="#00000000" Offset="-0.99"/>
                                                            <GradientStop Color="#4D000000" Offset="-0.99"/>
                                                            <GradientStop Color="#FF000000" Offset="-0.99"/>
                                                            <GradientStop Color="#00000000" Offset="-0.99"/>
                                                        </LinearGradientBrush>
                                                    </UIElement.OpacityMask>
                                                </Rectangle>
                                                <Rectangle x:Name="IndeterminateBorder_Vertical" Fill="#FFFFFFFF" StrokeThickness="0" Visibility="Hidden">
                                                    <Shape.Stroke>
                                                        <x:NullExtension/>
                                                    </Shape.Stroke>
                                                    <UIElement.OpacityMask>
                                                        <LinearGradientBrush EndPoint="0.5,-0.914" StartPoint="0.5,1.914">
                                                            <GradientStop Color="#00000000" Offset="-0.99"/>
                                                            <GradientStop Color="#4D000000" Offset="-0.99"/>
                                                            <GradientStop Color="#FF000000" Offset="-0.99"/>
                                                            <GradientStop Color="#00000000" Offset="-0.99"/>
                                                        </LinearGradientBrush>
                                                    </UIElement.OpacityMask>
                                                </Rectangle>
                                                <Border x:Name="ValueChangedBorder" CornerRadius="2,2,2,2">
                                                    <UIElement.OpacityMask>
                                                        <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                                            <GradientStop Color="#00000000" Offset="0"/>
                                                            <GradientStop Color="#00000000" Offset="1"/>
                                                            <GradientStop Color="#00000000" Offset="0.48"/>
                                                        </LinearGradientBrush>
                                                    </UIElement.OpacityMask>
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                            <GradientStop Color="{DynamicResource WhiteColor}" Offset="0"/>
                                                            <GradientStop Color="#00F9F9F9" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Border x:Name="ValueChangedBorder_Vertical" CornerRadius="2,2,2,2" Visibility="Hidden">
                                                    <UIElement.OpacityMask>
                                                        <LinearGradientBrush EndPoint="0.5,-0.901" StartPoint="0.5,1.901">
                                                            <GradientStop Color="#00000000" Offset="0"/>
                                                            <GradientStop Color="#00000000" Offset="1"/>
                                                            <GradientStop Color="#00000000" Offset="0.48"/>
                                                        </LinearGradientBrush>
                                                    </UIElement.OpacityMask>
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint="0.953,0.5" StartPoint="0.323,0.5">
                                                            <GradientStop Color="{DynamicResource WhiteColor}" Offset="0"/>
                                                            <GradientStop Color="#00F9F9F9" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Border BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"
                                Background="{DynamicResource MouseOverBrush}" Margin="-1,-1,-1,-1" Opacity="0.65"/>
                                            </Grid>
                                        </Border>
                                        <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                    </Grid>
                                </Border>
                                <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                        BorderThickness="1,1,1,1" Margin="4,4,4,4" CornerRadius="3,3,3,3"
                        Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter TargetName="Background" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Indicator" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="IndeterminateBorder_Vertical" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ValueChangedBorder_Vertical" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="IndeterminateBorder" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="ValueChangedBorder" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="ButtonBase" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false"/>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <ResumeStoryboard BeginStoryboardName="IndeterminateOn_BeginStoryboard"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <PauseStoryboard BeginStoryboardName="IndeterminateOn_BeginStoryboard"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="false"/>
                                <Condition Property="ProgressBar.IsIndeterminate" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
                            <TriggerBase.ExitActions>
                                <StopStoryboard BeginStoryboardName="IndeterminateOn_BeginStoryboard"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="IndeterminateOn_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <EventTrigger RoutedEvent="RangeBase.ValueChanged">
                            <BeginStoryboard Storyboard="{StaticResource ValueChangedOn}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearSliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="14"/>
        <Setter Property="FrameworkElement.Width" Value="14"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border BorderThickness="1,1,1,1" CornerRadius="3,3,3,3" Background="{DynamicResource DarkBrush}">
                            <Border.BorderBrush>
                                <x:NullExtension/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,5,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="0,2,0,2"
                       Opacity="0.1" Grid.Row="1" Height="7">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="0,2.5,0,2.5" Opacity="0.15" Grid.Row="1" Height="7">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="0,3.2,0,3.2"
                       Opacity="0.2" Grid.Row="1" Height="7">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <TickBar x:Name="TopTick" Visibility="Collapsed" Height="4" SnapsToDevicePixels="true" Placement="Top"
                     Fill="{DynamicResource GlyphBrush}"/>
                        <Border x:Name="Bdr" Grid.Row="1" Margin="0" Height="5" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="1,1,1,1"/>
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource NuclearSliderThumb}" Width="18" Height="14"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar x:Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" SnapsToDevicePixels="true"
                     Placement="Bottom" Fill="{TemplateBinding Control.Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Bdr" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Bdr" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="Slider.Orientation" Value="Vertical">
                            <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Horizontal"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource DarkBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1,1,1,1"/>
    </Style>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="grid" ClipToBounds="true" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local" Margin="0,0,0,-29">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="border" CornerRadius="2,2,0,0" Panel.ZIndex="100">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" ZIndex="1" KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto" Margin="15,33,0,0">
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                            </TabPanel>
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Row="0" BorderThickness="1" CornerRadius="2" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2" Margin="4,29,4,4" Grid.RowSpan="2">
                            <Grid>
                                <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="2,2,2,2" Opacity="0.1">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5" Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3" Margin="4,4,4,4">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FF878787" Offset="0"/>
                                            <GradientStop Color="#FF737373" Offset="0.402"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                            <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                            <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}" CornerRadius="2,2,2,2"/>
                                        <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2" Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                            <Shape.Stroke>
                                                <x:NullExtension/>
                                            </Shape.Stroke>
                                        </Rectangle>
                                        <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2" Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                            <Shape.Stroke>
                                                <x:NullExtension/>
                                            </Shape.Stroke>
                                        </Rectangle>
                                        <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                                            <Border.BorderBrush>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                                    <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                                    <GradientStop Color="#FF646464" Offset="0.522"/>
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>
                                            <Grid>
                                                <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                                <ContentPresenter x:Name="PART_SelectedContentHost" Margin="4,30,4,4" ContentSource="SelectedContent"/>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Border>
                                <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                        BorderThickness="1,1,1,1" Margin="4,4,4,4" CornerRadius="3,3,3,3"
                        Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
                            <Setter TargetName="border" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="2,2,0,0"/>
                            <Setter TargetName="border" Property="Border.CornerRadius" Value="0,0,2,2"/>
                            <Setter TargetName="ContentPanel" Property="FrameworkElement.Margin" Value="4,0,4,29"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,33"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="FrameworkElement.Margin" Value="4,0,4,30"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="border" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                            <Setter TargetName="ContentPanel" Property="FrameworkElement.Margin" Value="-40,0,0,0"/>
                            <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0"/>
                            <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="0,2,2,0"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,10,0,0"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="FrameworkElement.Margin" Value="30,0,4,4"/>
                            <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="0,0,-29,0"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="border" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0"/>
                            <Setter TargetName="ContentPanel" Property="FrameworkElement.Margin" Value="0,0,-40,0"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="FrameworkElement.Margin" Value="4,0,30,4"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,5,0,0"/>
                            <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="-29,0,0,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedState"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedState"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid3"
                                             Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="12"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid2"
                                             Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="12"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="33"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid3"
                                             Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="33"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid2"
                                             Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="grid" Margin="3,2,3,0">
                        <FrameworkElement.LayoutTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </FrameworkElement.LayoutTransform>
                        <Grid x:Name="grid1">
                            <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Opacity="0.1"
                         Margin="-1,-1,-1,-1" Visibility="Collapsed">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                         Margin="-0.5,-0.5,-0.5,-0.5" Opacity="0.15" Visibility="Collapsed">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                         Margin="-0.3,-0.3,-0.3,-0.3" Opacity="0.2" Visibility="Collapsed">
                                <Shape.Stroke>
                                    <x:NullExtension/>
                                </Shape.Stroke>
                            </Rectangle>
                            <Grid x:Name="grid3" Height="33" VerticalAlignment="Top">
                                <Border x:Name="ButtonBase" BorderThickness="2,0,2,2" CornerRadius="0,0,3,3"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="0,0,2,2"/>
                                        <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,0,1,1" CornerRadius="0,0,1,1"/>
                                    </Grid>
                                </Border>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="4" RadiusY="4"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="SelectedState" RadiusX="4" RadiusY="4" Opacity="0"
                           OpacityMask="{DynamicResource HoverOpacity}" Fill="{DynamicResource MouseOverBrush}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" Margin="12,6,12,6" VerticalAlignment="Center"
                                  RecognizesAccessKey="true" ContentSource="Header"/>
                                <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="3,3,0,0"
                        Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                            </Grid>
                            <Grid x:Name="grid2" Margin="0,-33,0,33" VerticalAlignment="Bottom" Height="0" Opacity="1">
                                <Border x:Name="SelectedBase" BorderThickness="2,2,2,0" CornerRadius="3,3,0,0"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                        Margin="0,0,0,0" VerticalAlignment="Bottom" Height="27" Opacity="1">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="DarkBorder1" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="2,2,0,0"/>
                                        <Border x:Name="TranslucentBorder1" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,1,1,0" CornerRadius="1,1,0,0"/>
                                    </Grid>
                                </Border>
                                <Border x:Name="border" Margin="0,0,0,0" Opacity="0.5" Background="{TemplateBinding Control.Background}"
                        BorderThickness="1,1,1,0" CornerRadius="4,4,0,0" Height="27" VerticalAlignment="Bottom">
                                    <Border.BorderBrush>
                                        <x:NullExtension/>
                                    </Border.BorderBrush>
                                </Border>
                                <ContentPresenter x:Name="ContentSite_Copy" HorizontalAlignment="Center" Margin="12,10,12,9.04"
                                  VerticalAlignment="Stretch" RecognizesAccessKey="true" ContentSource="Header"
                                  RenderTransformOrigin="0.5,0.5">
                                    <UIElement.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </UIElement.RenderTransform>
                                </ContentPresenter>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Left">
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid1" Property="FrameworkElement.Margin" Value="0,0,0,-2"/>
                            <Setter TargetName="grid3" Property="FrameworkElement.Margin" Value="0,27,0,0"/>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Right">
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid1" Property="FrameworkElement.Margin" Value="0,0,0,-3"/>
                            <Setter TargetName="grid3" Property="FrameworkElement.Margin" Value="0,27,0,0"/>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="ContentSite" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid1" Property="FrameworkElement.Margin" Value="0,5,0,-2"/>
                            <Setter TargetName="DarkBorder" Property="FrameworkElement.Margin" Value="0,0,0,10"/>
                            <Setter TargetName="ContentSite_Copy" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="DarkBorder1" Property="FrameworkElement.Margin" Value="0,0,0,10"/>
                            <Setter TargetName="grid3" Property="FrameworkElement.Height" Value="25"/>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectOff_BeginStoryboard" Storyboard="{StaticResource SelectOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectOn_BeginStoryboard" Storyboard="{StaticResource SelectOn}"/>
                            </TriggerBase.EnterActions>
                            <Setter Property="Panel.ZIndex" Value="100"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="grid" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="2,2,2,2"
                       Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                       Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3" Margin="4,4,4,4">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF878787" Offset="0"/>
                                    <GradientStop Color="#FF737373" Offset="0.402"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                    <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                    <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                        CornerRadius="1,1,1,1"/>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                            <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                            <GradientStop Color="#FF646464" Offset="0.522"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Grid>
                                        <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                        <ScrollViewer Focusable="false" Padding="4" HorizontalScrollBarVisibility="Auto"
                                  VerticalScrollBarVisibility="Auto" CanContentScroll="false"
                                  Background="{DynamicResource DarkBrush}" Margin="0,0,1,0">
                                            <ItemsPresenter/>
                                        </ScrollViewer>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" Margin="4,4,4,4" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="CheckedTrue">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="180"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="90"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid Width="15" Height="13" Background="Transparent">
                        <Path x:Name="IsExpandedPath" Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1"
                  VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 8,4 4,8 Z"/>
                        <Path x:Name="ExpandPath" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Center"
                  Stroke="{DynamicResource TextBrush}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 8,1.5 "
                  RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0">
                            <UIElement.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="90"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </UIElement.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedTrue}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="1,0,0,0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" ClickMode="Press">
                            <ToggleButton.IsChecked>
                                <Binding Path="IsExpanded" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </ToggleButton.IsChecked>
                        </ToggleButton>
                        <Border x:Name="Selection_Border" Grid.Column="1"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
                            <Grid>
                                <Border x:Name="Base" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                        Opacity="0">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="DarkBorder" Margin="0,7,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="2,2,2,2"/>
                                        <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                    </Grid>
                                </Border>
                                <Border x:Name="HoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                        Opacity="0">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="HoverDarkBorder" Margin="0,7,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="2,2,2,2"/>
                                        <Border x:Name="HoverTranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                    </Grid>
                                </Border>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="SelectedHoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                        Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                        Opacity="0" IsHitTestVisible="false">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="HoverDarkBorder1" Margin="0,7,0,0" Background="{DynamicResource DarkBrush}"
                            CornerRadius="2,2,2,2"/>
                                        <Border x:Name="HoverTranslucentBorder1" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                            BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                    </Grid>
                                </Border>
                                <Rectangle x:Name="SelectedHoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}" IsHitTestVisible="false">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  ContentSource="Header" Margin="3,3,3,3"/>
                                <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                        Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="false"/>
                                <Condition SourceName="Selection_Border" Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="2,2,2,2"
                       Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="2.5,2.5,2.5,2.5" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4"
                       Margin="3.2,3.2,3.2,3.2" Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3" Margin="4,4,4,4">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF878787" Offset="0"/>
                                    <GradientStop Color="#FF737373" Offset="0.402"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                    <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                    <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                        CornerRadius="1,1,1,1"/>
                                <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="FocusEffect" Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"
                           Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                                    <Shape.Stroke>
                                        <x:NullExtension/>
                                    </Shape.Stroke>
                                </Rectangle>
                                <Border x:Name="InsetBorder" Margin="4,0,4,0" Background="{DynamicResource DarkBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                            <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                            <GradientStop Color="#FF646464" Offset="0.522"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Grid>
                                        <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                        <ScrollViewer Padding="{TemplateBinding Control.Padding}" Style="{DynamicResource ListViewScrollViewer}"
                                  Margin="0,0,0,0">
                                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        </ScrollViewer>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" Margin="4,4,4,4" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
        <Setter Property="Control.Padding" Value="5,2,5,2"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Border x:Name="Base" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,6,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="HoverDarkBorder" Margin="0,6,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverTranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="SelectedHoverBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    Opacity="0">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="HoverDarkBorder1" Margin="0,6,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverTranslucentBorder1" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="SelectedHoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="0,2,0,2"
                                  VerticalAlignment="Stretch"/>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="Control.Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-8.5"/>
        <Setter Property="FrameworkElement.Width" Value="18"/>
        <Setter Property="FrameworkElement.Height">
            <Setter.Value>
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="0,3,0,4"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Rectangle HorizontalAlignment="Center" Width="0.5">
                            <Shape.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.Padding" Value="2,0,2,0"/>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,6,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <ContentPresenter VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true" Margin="2,2,2,2"/>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" Margin="0,0,7,0"
                     Width="Auto" HorizontalAlignment="Stretch"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="FrameworkElement.Height" Value="Auto">
                            <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="GridViewColumnHeader.Role" Value="Floating">
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter Property="Control.Background" Value="Yellow"/>
                            <Setter Value="{DynamicResource MouseOverBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Control.Padding}">
                            <ScrollViewer Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                            DockPanel.Dock="Top">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                                    <GridViewRowPresenterBase.Columns>
                                        <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewRowPresenterBase.Columns>
                                    <GridViewHeaderRowPresenter.AllowsColumnReorder>
                                        <Binding Path="TemplatedParent.View.AllowsColumnReorder" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.AllowsColumnReorder>
                                    <GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContainerStyle"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                    <GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContextMenu"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                    <GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderTemplate" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                    <GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderToolTip" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                </GridViewHeaderRowPresenter>
                            </ScrollViewer>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                      CanVerticallyScroll="false" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </DockPanel>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Row="1"
                       Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Margin="0,0,0,-17">
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Cursor="Arrow"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                       Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Margin="0,0,-19,0">
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <DockPanel Grid.Column="1" Grid.Row="1" LastChildFill="false">
                            <Rectangle Width="1" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                         DockPanel.Dock="Left">
                                <Shape.Fill>
                                    <x:NullExtension/>
                                </Shape.Fill>
                            </Rectangle>
                            <Rectangle Height="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                         DockPanel.Dock="Top">
                                <Shape.Fill>
                                    <x:NullExtension/>
                                </Shape.Fill>
                            </Rectangle>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Control.BorderBrush" Value="#D5DFE5"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Rectangle Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6" Margin="-2.4,-2.4,-2.4,-2.4"
                       Opacity="0.1" Grid.ColumnSpan="4" Grid.RowSpan="4">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5" Margin="-1.5,-1.5,-1.5,-1.5"
                       Opacity="0.15" Grid.ColumnSpan="4" Grid.RowSpan="4">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1" Opacity="0.2"
                       Grid.ColumnSpan="4" Grid.RowSpan="4">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource BaseBrush}"
                    CornerRadius="4,4,4,4" BorderThickness="1,1,1,1"/>
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4"
                    BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Grid>
                                <Border BorderThickness="2,2,2,2" CornerRadius="3,3,3,3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FF878787" Offset="0"/>
                                            <GradientStop Color="#FF737373" Offset="0.402"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                            <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                            <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Grid Width="Auto" Height="Auto">
                                        <Border Margin="0,10,0,0" Background="{DynamicResource DarkBrush}" CornerRadius="2,2,2,2"/>
                                        <Border Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                        <Rectangle Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2" Opacity="0"
                               OpacityMask="{DynamicResource HoverOpacity}">
                                            <Shape.Stroke>
                                                <x:NullExtension/>
                                            </Shape.Stroke>
                                        </Rectangle>
                                        <Rectangle Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2" Opacity="0"
                               OpacityMask="{DynamicResource HoverOpacity}">
                                            <Shape.Stroke>
                                                <x:NullExtension/>
                                            </Shape.Stroke>
                                        </Rectangle>
                                        <Border Margin="4,0,4,0" Background="{DynamicResource DarkBrush}" BorderThickness="1,1,1,1"
                            CornerRadius="2,2,2,2">
                                            <Border.BorderBrush>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                                    <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                                    <GradientStop Color="#FF646464" Offset="0.522"/>
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>
                                            <Grid>
                                                <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737">
                                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="4,4,4,4"/>
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Border>
                                <Border BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="1,1,1,1" Margin="4,4,4,4"
                        CornerRadius="3,3,3,3" Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"
                        IsHitTestVisible="false"/>
                            </Grid>
                        </Border>
                        <Border x:Name="ButtonBase" Grid.ColumnSpan="4" Grid.RowSpan="2" BorderThickness="2,2,2,2"
                    CornerRadius="3,3,3,3" Background="{DynamicResource BaseBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Margin="4,4,4,4" Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <Grid>
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentSource="Header"
                                  RecognizesAccessKey="true" Margin="0,4,0,4"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ToolBarButtonHover" Color="#FF8F8F8F"/>
    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.0800000" Value="0.22"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.45"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.15"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,0,0">
                        <Grid>
                            <Border x:Name="ButtonBase" BorderThickness="0,2,2,2" CornerRadius="0,1,1,0">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF878787" Offset="0"/>
                                        <GradientStop Color="#FF737373" Offset="0.402"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border.BorderBrush>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                        <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                        <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Grid Width="Auto" Height="Auto">
                                    <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                          CornerRadius="2,2,2,2"/>
                                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,1,1"
                          CornerRadius="0,1,1,0"/>
                                    <Border x:Name="InsetBorder" CornerRadius="0,2,2,0" BorderThickness="1,0,0,0">
                                        <Border.Background>
                                            <x:NullExtension/>
                                        </Border.Background>
                                        <Border.BorderBrush>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                                <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                                <GradientStop Color="#FF646464" Offset="0.522"/>
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>
                                        <Grid>
                                            <Border BorderThickness="0,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                        </Grid>
                                    </Border>
                                </Grid>
                            </Border>
                            <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom"
                      Width="6" Height="7">
                                <Path Stroke="White" Data="M 1,1.5 L 6,1.5 "/>
                                <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0.5 L 5,0.5 "/>
                                <Path Fill="White" Data="M 0.5,4 L 6.5,4 3.5,7 Z"/>
                                <Path Fill="{TemplateBinding Control.Foreground}" Data="M -0.5,3 L 5.5,3 2.5,6 Z"/>
                            </Canvas>
                            <Border x:Name="HoverEffect" Background="{TemplateBinding Control.Background}" CornerRadius="0,3,3,0"
                      Opacity="0" OpacityMask="{DynamicResource HoverOpacity}"/>
                            <Border x:Name="DisabledBorder" CornerRadius="0,3,3,0" Opacity="0"
                      Background="{DynamicResource DisabledBackgroundBrush}"
                      BorderBrush="{DynamicResource DisabledBorderBrush}">
                                <UIElement.OpacityMask>
                                    <x:NullExtension/>
                                </UIElement.OpacityMask>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD"/>
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF"/>
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border SnapsToDevicePixels="true" Background="Transparent" Padding="{TemplateBinding Control.Padding}"
                  CornerRadius="0,0,0,0">
                        <Rectangle>
                            <Shape.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4"
                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  CornerRadius="0,0,3,3">
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom"
                    Width="7" Height="6">
                            <Path Stroke="White" Data="M 1.5,1 L 1.5,6 "/>
                            <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0.5,0 L 0.5,5 "/>
                            <Path Fill="White" Data="M 3.5,0.5 L 7,3.5 4,6.5 Z"/>
                            <Path Fill="{TemplateBinding Control.Foreground}" Data="M 3,-0.5 L 6,2.5 3,5.5 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Control.Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="3,1,1,1">
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="3" RadiusY="3"
                       Margin="-1.5,-1.5,-1.5,-1.5" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="2" RadiusY="2" Margin="-1,-1,-1,-1"
                       Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="1" RadiusY="1"
                       Margin="-0.5,-0.5,-0.5,-0.5" Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right" Margin="0,0,-2,0">
                            <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                            Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press">
                                <FrameworkElement.FocusVisualStyle>
                                    <x:NullExtension/>
                                </FrameworkElement.FocusVisualStyle>
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsOverflowOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <Popup x:Name="OverflowPopup" Focusable="false" AllowsTransparency="true" Placement="Bottom"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     StaysOpen="false">
                                <Popup.IsOpen>
                                    <Binding Path="IsOverflowOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <Border x:Name="Shdw">
                                    <Border BorderThickness="1,1,1,1" Background="{DynamicResource BaseBrush}">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Focusable="true"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2" WrapWidth="200"
                                          KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle">
                                            <FrameworkElement.FocusVisualStyle>
                                                <x:NullExtension/>
                                            </FrameworkElement.FocusVisualStyle>
                                        </ToolBarOverflowPanel>
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Margin="0,0,11,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,0,0,0"
                    Padding="{TemplateBinding Control.Padding}">
                            <Border.Background>
                                <x:NullExtension/>
                            </Border.Background>
                            <Grid>
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Grid Width="10">
                                        <Border x:Name="ButtonBase" BorderThickness="2,2,0,2" CornerRadius="1,0,0,1">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FF878787" Offset="0"/>
                                                    <GradientStop Color="#FF737373" Offset="0.402"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Border.BorderBrush>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                    <GradientStop Color="#FFBCBCBC" Offset="0.594"/>
                                                    <GradientStop Color="#FFF3F3F3" Offset="0.473"/>
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>
                                            <Grid Width="Auto" Height="Auto">
                                                <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                                CornerRadius="2,2,2,2"/>
                                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="#3FFFFFFF" BorderThickness="1,1,0,1"
                                CornerRadius="1,0,0,1"/>
                                                <Border x:Name="InsetBorder" BorderThickness="0,0,1,0" CornerRadius="0,0,0,0">
                                                    <Border.Background>
                                                        <x:NullExtension/>
                                                    </Border.Background>
                                                    <Border.BorderBrush>
                                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                            <GradientStop Color="#FFCBCBCB" Offset="0.004"/>
                                                            <GradientStop Color="#FFD8D8D8" Offset="1"/>
                                                            <GradientStop Color="#FF646464" Offset="0.522"/>
                                                        </LinearGradientBrush>
                                                    </Border.BorderBrush>
                                                    <Grid>
                                                        <Border BorderThickness="0,0,1,0" CornerRadius="1,1,1,1" BorderBrush="#FF373737"/>
                                                    </Grid>
                                                </Border>
                                            </Grid>
                                        </Border>
                                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                            BorderThickness="1,1,0,1" CornerRadius="1,1,1,1"
                            Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" IsHitTestVisible="false"/>
                                        <Thumb x:Name="ToolBarThumb" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}"/>
                                    </Grid>
                                    <Grid>
                                        <Border BorderBrush="{DynamicResource InsetBrush}" BorderThickness="0,1,0,1"
                            Background="{DynamicResource DarkBrush}"/>
                                        <ContentPresenter x:Name="ToolBarHeader" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                      HorizontalAlignment="Center" Margin="4,0,4,0" VerticalAlignment="Center" ContentSource="Header"/>
                                    </Grid>
                                    <Grid>
                                        <ToolBarPanel x:Name="PART_ToolBarPanel" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  Margin="0,1,2,2" IsItemsHost="true" Background="{DynamicResource DarkBrush}"/>
                                        <Border BorderBrush="{DynamicResource InsetBrush}" BorderThickness="0,1,0,1"/>
                                    </Grid>
                                </DockPanel>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="HeaderedItemsControl.Header">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="Border.Background" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
                            <Setter TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"
                      Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
                            <Setter Value="{StaticResource ToolBarVerticalBackground}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearButton}"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter Property="FrameworkElement.MinWidth" Value="50"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearRadioButton}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontSize" Value="10"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearCheckBox}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontSize" Value="10"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearComboBox}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontSize" Value="10"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearTextBox}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Margin="2" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Control.Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverEffect"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonBase"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" CornerRadius="3,3,3,3"/>
                        <Rectangle x:Name="Shadow1" Fill="#FF000000" StrokeThickness="0" RadiusX="6" RadiusY="6"
                       Margin="-2.5,-2.5,-2.5,-2.5" Opacity="0.1">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow2" Fill="#FF000000" StrokeThickness="0" RadiusX="5.5" RadiusY="5.5"
                       Margin="-1.8,-1.8,-1.8,-1.8" Opacity="0.15">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Shadow3" Fill="#FF000000" StrokeThickness="0" RadiusX="4" RadiusY="4" Margin="-1,-1,-1,-1"
                       Opacity="0.2">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Border x:Name="ButtonBase" BorderThickness="2,2,2,2" CornerRadius="3,3,3,3"
                    Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="DarkBorder" Margin="0,8,0,0" Background="{DynamicResource DarkBrush}"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HoverEffect" Fill="{TemplateBinding Control.Background}" RadiusX="6" RadiusY="6"
                       Opacity="0" OpacityMask="{DynamicResource HoverOpacity}">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="Hover" RadiusX="6" RadiusY="6" Opacity="0">
                            <Shape.Stroke>
                                <x:NullExtension/>
                            </Shape.Stroke>
                            <UIElement.OpacityMask>
                                <x:NullExtension/>
                            </UIElement.OpacityMask>
                            <Shape.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Shape.Fill>
                        </Rectangle>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                              HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4"/>
                        <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                    BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                    Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource MouseOverBrush}"/>
    </Style>
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Control.Background" Value="{DynamicResource DarkBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <StackPanel Background="{TemplateBinding Control.Background}" IsItemsHost="true" ClipToBounds="true"
                        Orientation="Horizontal"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Control.Background" Value="{DynamicResource DarkBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <StackPanel Background="{TemplateBinding Control.Background}" IsItemsHost="true" ClipToBounds="true"
                        Orientation="Vertical"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15"/>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HightlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Base" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition x:Name="columnDefinition" Width="37"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="14"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon" MinWidth="32"/>
                            <Grid x:Name="GlyphPanel" Visibility="Hidden" Margin="4,0,6,0" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z" FlowDirection="LeftToRight"/>
                            </Grid>
                            <Border x:Name="Base" Grid.Column="0" Grid.ColumnSpan="5" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2"
                      Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                      Opacity="0">
                                <Grid Width="Auto" Height="Auto">
                                    <Border x:Name="DarkBorder" Margin="0,10,0,0" Background="{DynamicResource DarkBrush}"
                          CornerRadius="2,2,2,2"/>
                                    <Border x:Name="TranslucentBorder" Opacity="1" BorderBrush="{DynamicResource TranslucentBrush}"
                          BorderThickness="1,1,1,1" CornerRadius="1,1,1,1"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="HeaderHost" Grid.Column="1" RecognizesAccessKey="true" ContentSource="Header"
                                Margin="4,2,4,2"/>
                            <TextBlock Margin="{TemplateBinding Control.Padding}" Grid.Column="3"
                         Text="{TemplateBinding MenuItem.InputGestureText}"/>
                            <Border x:Name="DisabledBorder" BorderBrush="{DynamicResource DisabledBorderBrush}"
                      BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"
                      Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" Grid.Column="1"/>
                            <Grid x:Name="ArrowPanel" Column="4" Margin="4,0,6,0" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,0 L 0,8 4,4 Z"/>
                            </Grid>
                            <Popup x:Name="SubMenuPopup" Placement="Right" Focusable="false" AllowsTransparency="true"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     VerticalOffset="-3">
                                <Popup.IsOpen>
                                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderThickness="1"/>
                                    <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0,4,0,4"/>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                            <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
                            <Setter Property="Control.Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="columnDefinition" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                            <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
                            <Setter Property="Control.Padding" Value="6,3,6,3"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="columnDefinition" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="0,2,0,2"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Icon">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuPopup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="0,0,3,3"/>
                            <Setter TargetName="SubMenu" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"
                      Property="UIElement.BitmapEffect"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HightlightOff_BeginStoryboard" Storyboard="{StaticResource HightlightOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>